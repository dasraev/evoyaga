{"version":3,"sources":["webpack:///./src/utils/validatorMessages.js","webpack:///./src/views/Auth.vue","webpack:///./src/views/Auth.vue?7508"],"names":["requiredValidatorMessage","path","workerIsRequiredValidatorMessage","minValidatorMessage","args","min","maxValidatorMessage","max","isLatinLetters","value","regex","test","router","useRouter","serverErrorMessage","ref","store","useStore","alertIt","useAlert","passwordViewType","schema","yup","password","required","username","handleSubmit","isSubmitting","useForm","validationSchema","onInvalidSubmit","values","errors","results","console","log","onSubmit","async","status","data","axios","post","localStorage","setItem","access_token","dispatch","getters","role","push","name","e","response","message","errorMessage","passwordError","useField","usernameError","__exports__"],"mappings":"gHAAA,0KAEO,MAAMA,EAA2B,EAAEC,UAChC,mCAEGC,EAAmC,IACvC,2BAGIC,EAAuBC,GAC1B,yBAAwBA,EAAKC,wBAE1BC,EAAuBF,GAC1B,0BAAyBA,EAAKG,wBAM3BC,EAAkBJ,GAAS,CACtC,WACA,8CACCK,IACC,MAAMC,EAAQ,wBACd,OAAQA,EAAMC,KAAKF,M,mqBC2CvB,MAAMG,EAASC,iBACTC,EAAqBC,iBAAI,IACzBC,EAAQC,kBACR,QAACC,GAAWC,iBACZC,EAAmBL,iBAAI,YAEvBM,EAASC,OAAW,CACxBC,SAAUD,SAAaE,SAASxB,QAA0BK,IAAI,EAAGF,QACjEsB,SAAUH,SAAaE,SAASxB,QAA0BK,IAAI,EAAGF,WAG7D,aAACuB,EAAY,aAAEC,GAAgBC,eAAQ,CAC3CC,iBAAkBR,IAGpB,SAASS,GAAgB,OAACC,EAAM,OAAEC,EAAM,QAAEC,IACxCC,QAAQC,IAAIH,GAGd,MAAMI,EAAWV,EAAaW,OAAQZ,WAAUF,eAC9C,IACE,MAAM,OAACe,EAAM,KAAEC,SAAcC,OAAMC,KAAK,eAAgB,CACtDhB,SAAUA,EACVF,SAAUA,IAEG,MAAXe,GACFI,aAAaC,QAAQ,eAAoB,OAAJJ,QAAI,IAAJA,OAAI,EAAJA,EAAMK,oBAEvC5B,EAAM6B,SAAS,MAEyB,KAA1C7B,EAAM8B,QAAQ,eAAerB,WAC/BS,QAAQC,IAAInB,EAAM8B,QAAQ,gBAC1B5B,EAAQ,gBAAiB,WACiB,eAAtCF,EAAM8B,QAAQ,eAAeC,KAC/BnC,EAAOoC,KAAK,CACVC,KAAM,qBAGFrC,EAAOoC,KAAK,MAMtB,MAAOE,GAAG,QACVpC,EAAmBL,OAAkB,QAAV,EAAAyC,EAAEC,gBAAQ,OAAM,QAAN,EAAV,EAAYZ,YAAI,WAAN,EAAV,EAAkBa,UAAW,sCAEzDtB,IAEIrB,MAAOc,EAAU8B,aAAcC,GAAiBC,eAAS,aACzD9C,MAAOgB,EAAU4B,aAAcG,GAAiBD,eAAS,Y,sqGClHhE,MAAME,EAAc,EAEL","file":"static/js/chunk-e1a0d436.1fb5fb60.js","sourcesContent":["//          /^[a-zA-Z\\s.,]+$/\n\nexport const requiredValidatorMessage = ({path}) => {\n  return `Ushbu maydon to'ldirilishi shart`;\n};\nexport const workerIsRequiredValidatorMessage = () => {\n  return 'Xodimni belgilash zarur!';\n};\n\nexport const minValidatorMessage = (args) => {\n  return `Ushbu maydon eng kami ${args.min} ta bo'lishi kerak`;\n};\nexport const maxValidatorMessage = (args) => {\n  return `Ushbu maydon eng ko'pi ${args.max} ta bo'lishi kerak`;\n};\nexport const onlyLatinLetters = (args) => {\n  return `Ushbu maydon faqat lotin harflari bilan to'ldirilishi kerak`;\n};\n\nexport const isLatinLetters = (args) => [\n  'is-latin',\n  'Iltimos faqat lotin harflaridan foydalaning',\n  (value) => {\n    const regex = /[^\\P{L}a-z][^a-z]*/giu;\n    return !regex.test(value);\n  },\n];\n","<template>\n  <div class=\"h-screen max-w-[451px] mx-auto flex flex-col justify-center\">\n    <h1 class=\"text-2xl my-6 text-center font-montserrat\">Tizimga kirish</h1>\n    <form @submit.prevent=\"onSubmit\">\n      <div class=\"mb-3 grid grid-cols-1 gap-3\">\n        <div>\n          <input\n            id=\"name\"\n            v-model=\"username\"\n            class=\"placeholder-gray-300 focus:ring-0 shadow appearance-none border border-gray-300 rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:border-blue-500 focus:ring-0 focus:shadow-outline\"\n            :class=\"{'border-red-400 focus:border-red-400': usernameError?.length || serverErrorMessage}\"\n            type=\"text\"\n            placeholder=\"username\"\n          />\n          <span>{{ usernameError }}</span>\n        </div>\n        <div>\n          <div class=\"relative\">\n            <input\n              v-model=\"password\"\n              class=\"placeholder-gray-300 shadow appearance-none border border-gray-300 rounded w-full py-2 px-3 pr-[40px] text-gray-700 leading-tight focus:outline-none focus:border-blue-500 focus:ring-0 focus:shadow-outline\"\n              :type=\"passwordViewType\"\n              placeholder=\"parol\"\n              :class=\"{'border-red-400 focus:border-red-400': passwordError?.length || serverErrorMessage}\"\n            />\n            <div class=\"absolute right-1 top-0 w-[40px] h-full flex flex-col justify-center\">\n              <div v-if=\"passwordViewType === 'password'\" @click.prevent.stop=\"passwordViewType = 'text'\">\n                <Icon icon=\"ic:baseline-remove-red-eye\" class=\"w-[40px] h-[25px]\" />\n              </div>\n              <div v-if=\"passwordViewType === 'text'\" @click.prevent.stop=\"passwordViewType = 'password'\">\n                <Icon icon=\"mdi:eye-off\" class=\"w-[40px] h-[25px]\" />\n              </div>\n            </div>\n          </div>\n          <span>{{ passwordError }}</span>\n        </div>\n      </div>\n      <div class=\"mb-3 grid grid-cols-1\">\n        <button\n          type=\"submit\"\n          :disabled=\"isSubmitting\"\n          class=\"clickEffectBtn py-3.5 w-full mx-auto rounded bg-[#4785FE] text-white flex items-center justify-center\"\n          :class=\"{'opacity-30 cursor-not-allowed': isSubmitting}\"\n        >\n          Kirish\n        </button>\n      </div>\n    </form>\n    <p v-if=\"serverErrorMessage\" class=\"my-2 text-red-500 flex justify-center items-center text-xl\">\n      {{ serverErrorMessage }}\n      <Icon icon=\"mdi:close-circle\" class=\"mx-3 cursor-pointer\" width=\"34\" height=\"34\" @click=\"serverErrorMessage = ''\" />\n    </p>\n  </div>\n</template>\n\n<script setup>\nimport {useField, useForm} from 'vee-validate';\nimport * as yup from 'yup';\nimport {ref} from 'vue';\nimport {useStore} from 'vuex';\nimport 'vue-loading-overlay/dist/vue-loading.css';\nimport axios from '../services/api/axios';\nimport {Icon} from '@iconify/vue';\nimport {useRouter} from 'vue-router';\nimport {minValidatorMessage, requiredValidatorMessage} from '../utils/validatorMessages';\nimport useAlert from '../composables/useAlert';\n\nconst router = useRouter();\nconst serverErrorMessage = ref('');\nconst store = useStore();\nconst {alertIt} = useAlert();\nconst passwordViewType = ref('password');\n\nconst schema = yup.object({\n  password: yup.string().required(requiredValidatorMessage).min(8, minValidatorMessage),\n  username: yup.string().required(requiredValidatorMessage).min(7, minValidatorMessage),\n});\n\nconst {handleSubmit, isSubmitting} = useForm({\n  validationSchema: schema,\n});\n\nfunction onInvalidSubmit({values, errors, results}) {\n  console.log(errors); // a map of field names and their first error message\n}\n\nconst onSubmit = handleSubmit(async ({username, password}) => {\n  try {\n    const {status, data} = await axios.post('/auth/login/', {\n      username: username,\n      password: password,\n    });\n    if (status === 200) {\n      localStorage.setItem('access_token', data?.access_token);\n    }\n    await store.dispatch('me');\n\n    if (store.getters['getUserInfo'].username !== '') {\n      console.log(store.getters['getUserInfo']);\n      alertIt('Xush kelibsiz', 'success');\n      if (store.getters['getUserInfo'].role === 'Monitoring') {\n        router.push({\n          name: 'monitoring',\n        });\n      } else {\n        await router.push('/');\n      }\n      // setTimeout(() => {\n      //   location.reload(true);\n      // }, 500);\n    }\n  } catch (e) {\n    serverErrorMessage.value = e.response?.data?.message || 'Tizimga kirishda hatolik yuzberdi';\n  }\n}, onInvalidSubmit);\n\nconst {value: password, errorMessage: passwordError} = useField('password');\nconst {value: username, errorMessage: usernameError} = useField('username');\n</script>\n\n<style scoped></style>\n","import script from \"./Auth.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Auth.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}